{"ast":null,"code":"/*\r\n * Copyright (C) 2016 - present Juergen Zimmermann, Hochschule Karlsruhe\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\n// Alternativen: Local Storage oder Session-Cookies mit dem Token\n// In Anlehnung an\n// https://github.com/BCJTI/ng2-cookies/blob/master/src/services/cookie.ts\nimport { Temporal } from '@js-temporal/polyfill';\nimport log from 'loglevel';\n// Namen der Cookies: nur als Speichermechanismus (nicht zum Server übertragen):\n// Ablaufdatum oder Session-Cookie (Lebensdauer gebunden an Tab).\n// Kein XSS (Cross-Site Scripting) wie bei Local Storage\n// Evtl. CSRF (Cross-Site Request Forgery)\nconst AUTHORIZATION = 'authorization';\nconst ROLES = 'roles';\nconst SEPARATOR = ',';\n/**\r\n * @param name Name des gesuchten Cookies\r\n * @return Werte des gefundenes Cookie oder undefined\r\n */\nconst getCookie = name => {\n  const encodedName = encodeURIComponent(name);\n  const regexp = new RegExp(`(?:^${encodedName}|;\\\\s*${encodedName})=(.*?)(?:;|$)`, 'gu');\n  // alle Cookies durchsuchen\n  const result = regexp.exec(document.cookie);\n  if (result === null) {\n    return;\n  }\n  const [, encoded] = result;\n  if (encoded === undefined) {\n    return;\n  }\n  // z.B. %20 durch Leerzeichen ersetzen\n  return decodeURIComponent(encoded);\n};\n/**\r\n * @param name Name des Cookies\r\n * @param value Wert des Cookies\r\n * @param expires Ablaufdatum in Millisekunden. Default: Session.\r\n * @param path Pfad des Cookies. Default: /.\r\n * @param domain Domain des Cookies. Default: aktuelle Domain.\r\n */\nconst setCookie = (name, value, expires, path, domain) => {\n  let cookieStr = `${encodeURIComponent(name)}=${encodeURIComponent(value)};`;\n  if (expires !== undefined) {\n    // TODO Das neue \"Temporal API\" bietet keine Konvertierung in einen UTC-String\n    const expirationDate = new Date(expires);\n    cookieStr += `expires=${expirationDate.toUTCString()};`;\n  }\n  if (path !== undefined) {\n    cookieStr += `path=${path};`;\n  }\n  if (domain !== undefined) {\n    cookieStr += `domain=${domain};`;\n  }\n  // Kein Zugriff mit JavaScript; Uebertragung nur mit HTTPS\n  // cookieStr += 'HttpOnly; Secure;'\n  // Uebertragung nur mit HTTPS\n  cookieStr += 'Secure;';\n  // Schutz vor XSS\n  cookieStr += 'SameSite=Strict;';\n  log.debug('StorageService.#setCookie: ', cookieStr);\n  // neues Cookie anlegen\n  document.cookie = cookieStr;\n  // cookieStore ist nur bei HTTPS verfuegbar und nicht in jedem Browser\n  // await cookieStore.set({\n  //     name,\n  //     value,\n  //     expires: ...,\n  //     domain,\n  // });\n};\n/**\r\n * @param name Name des Cookies\r\n * @param path Pfad des Cookies. Default: /.\r\n * @param domain Domain des Cookies. Default: aktuelle Domain.\r\n */\nconst deleteCookie = (name, path, domain) => {\n  if (getCookie(name) !== undefined) {\n    // expires in der Vergangenheit\n    setCookie(name, '', -1, path, domain);\n  }\n};\nexport const getAuthorization = () => getCookie(AUTHORIZATION);\nexport const saveAuthorization = (authorization, roles, expirationInMillis = Temporal.Now.instant().add({\n  minutes: 60\n}).epochMilliseconds) => {\n  setCookie(AUTHORIZATION, authorization, expirationInMillis);\n  // z.B. ['admin', 'mitarbeiter'] -> 'admin,mitarbeiter'\n  const rolesStr = roles.join(SEPARATOR);\n  log.debug('StorageService.saveAuthorization: rolesStr=', rolesStr);\n  setCookie(ROLES, rolesStr, expirationInMillis);\n};\nexport const getRoles = () => {\n  // z.B. 'admin,mitarbeiter'\n  const rolesStr = getCookie(ROLES);\n  log.debug('StorageService.roles: rolesStr=', rolesStr);\n  // z.B. ['admin', 'mitarbeiter']\n  return rolesStr === undefined ? [] : rolesStr.split(SEPARATOR);\n};\nexport const deleteAuthorization = () => {\n  deleteCookie(AUTHORIZATION);\n  deleteCookie(ROLES);\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AAEA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,OAAOC,GAAG,MAAM,UAAU;AAE1B;AACA;AACA;AACA;AAEA,MAAMC,aAAa,GAAG,eAAe;AACrC,MAAMC,KAAK,GAAG,OAAO;AACrB,MAAMC,SAAS,GAAG,GAAG;AAErB;;;;AAIA,MAAMC,SAAS,GAAIC,IAAY,IAAI;EAC/B,MAAMC,WAAW,GAAGC,kBAAkB,CAACF,IAAI,CAAC;EAC5C,MAAMG,MAAM,GAAG,IAAIC,MAAM,CACrB,OAAOH,WAAW,SAASA,WAAW,gBAAgB,EACtD,IAAI,CACP;EACD;EACA,MAAMI,MAAM,GAAGF,MAAM,CAACG,IAAI,CAACC,QAAQ,CAACC,MAAM,CAAC;EAC3C,IAAIH,MAAM,KAAK,IAAI,EAAE;IACjB;;EAEJ,MAAM,GAAGI,OAAO,CAAC,GAAGJ,MAAgC;EACpD,IAAII,OAAO,KAAKC,SAAS,EAAE;IACvB;;EAEJ;EACA,OAAOC,kBAAkB,CAACF,OAAO,CAAC;AACtC,CAAC;AAED;;;;;;;AAOA,MAAMG,SAAS,GAAG,CACdZ,IAAY,EACZa,KAAa,EACbC,OAAgB,EAChBC,IAAa,EACbC,MAAe,KAEf;EACA,IAAIC,SAAS,GAAG,GAAGf,kBAAkB,CAACF,IAAI,CAAC,IAAIE,kBAAkB,CAACW,KAAK,CAAC,GAAG;EAE3E,IAAIC,OAAO,KAAKJ,SAAS,EAAE;IACvB;IACA,MAAMQ,cAAc,GAAG,IAAIC,IAAI,CAACL,OAAO,CAAC;IACxCG,SAAS,IAAI,WAAWC,cAAc,CAACE,WAAW,EAAE,GAAG;;EAE3D,IAAIL,IAAI,KAAKL,SAAS,EAAE;IACpBO,SAAS,IAAI,QAAQF,IAAI,GAAG;;EAEhC,IAAIC,MAAM,KAAKN,SAAS,EAAE;IACtBO,SAAS,IAAI,UAAUD,MAAM,GAAG;;EAEpC;EACA;EAEA;EACAC,SAAS,IAAI,SAAS;EAEtB;EACAA,SAAS,IAAI,kBAAkB;EAE/BtB,GAAG,CAAC0B,KAAK,CAAC,6BAA6B,EAAEJ,SAAS,CAAC;EACnD;EACAV,QAAQ,CAACC,MAAM,GAAGS,SAAS;EAE3B;EACA;EACA;EACA;EACA;EACA;EACA;AACJ,CAAC;AAED;;;;;AAKA,MAAMK,YAAY,GAAG,CAACtB,IAAY,EAAEe,IAAa,EAAEC,MAAe,KAAI;EAClE,IAAIjB,SAAS,CAACC,IAAI,CAAC,KAAKU,SAAS,EAAE;IAC/B;IACAE,SAAS,CAACZ,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,EAAEe,IAAI,EAAEC,MAAM,CAAC;;AAE7C,CAAC;AAED,OAAO,MAAMO,gBAAgB,GAAG,MAAMxB,SAAS,CAACH,aAAa,CAAC;AAE9D,OAAO,MAAM4B,iBAAiB,GAAG,CAC7BC,aAAqB,EACrBC,KAAe,EACfC,qBAA6BjC,QAAQ,CAACkC,GAAG,CAACC,OAAO,EAAE,CAACC,GAAG,CAAC;EAAEC,OAAO,EAAE;AAAE,CAAE,CAAC,CACnEC,iBAAiB,KACtB;EACApB,SAAS,CAAChB,aAAa,EAAE6B,aAAa,EAAEE,kBAAkB,CAAC;EAC3D;EACA,MAAMM,QAAQ,GAAWP,KAAK,CAACQ,IAAI,CAACpC,SAAS,CAAC;EAC9CH,GAAG,CAAC0B,KAAK,CAAC,6CAA6C,EAAEY,QAAQ,CAAC;EAClErB,SAAS,CAACf,KAAK,EAAEoC,QAAQ,EAAEN,kBAAkB,CAAC;AAClD,CAAC;AAED,OAAO,MAAMQ,QAAQ,GAAG,MAAK;EACzB;EACA,MAAMF,QAAQ,GAAGlC,SAAS,CAACF,KAAK,CAAC;EACjCF,GAAG,CAAC0B,KAAK,CAAC,iCAAiC,EAAEY,QAAQ,CAAC;EACtD;EACA,OAAOA,QAAQ,KAAKvB,SAAS,GAAG,EAAE,GAAGuB,QAAQ,CAACG,KAAK,CAACtC,SAAS,CAAC;AAClE,CAAC;AAED,OAAO,MAAMuC,mBAAmB,GAAG,MAAK;EACpCf,YAAY,CAAC1B,aAAa,CAAC;EAC3B0B,YAAY,CAACzB,KAAK,CAAC;AACvB,CAAC","names":["Temporal","log","AUTHORIZATION","ROLES","SEPARATOR","getCookie","name","encodedName","encodeURIComponent","regexp","RegExp","result","exec","document","cookie","encoded","undefined","decodeURIComponent","setCookie","value","expires","path","domain","cookieStr","expirationDate","Date","toUTCString","debug","deleteCookie","getAuthorization","saveAuthorization","authorization","roles","expirationInMillis","Now","instant","add","minutes","epochMilliseconds","rolesStr","join","getRoles","split","deleteAuthorization"],"sourceRoot":"","sources":["C:\\Users\\Dominik\\software-engineering\\kundeweb\\src\\app\\auth\\storage.service.ts"],"sourcesContent":["/*\n * Copyright (C) 2016 - present Juergen Zimmermann, Hochschule Karlsruhe\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// Alternativen: Local Storage oder Session-Cookies mit dem Token\n// In Anlehnung an\n// https://github.com/BCJTI/ng2-cookies/blob/master/src/services/cookie.ts\n\nimport { Temporal } from '@js-temporal/polyfill';\nimport log from 'loglevel';\n\n// Namen der Cookies: nur als Speichermechanismus (nicht zum Server übertragen):\n// Ablaufdatum oder Session-Cookie (Lebensdauer gebunden an Tab).\n// Kein XSS (Cross-Site Scripting) wie bei Local Storage\n// Evtl. CSRF (Cross-Site Request Forgery)\n\nconst AUTHORIZATION = 'authorization';\nconst ROLES = 'roles';\nconst SEPARATOR = ',';\n\n/**\n * @param name Name des gesuchten Cookies\n * @return Werte des gefundenes Cookie oder undefined\n */\nconst getCookie = (name: string) => {\n    const encodedName = encodeURIComponent(name);\n    const regexp = new RegExp(\n        `(?:^${encodedName}|;\\\\s*${encodedName})=(.*?)(?:;|$)`,\n        'gu',\n    );\n    // alle Cookies durchsuchen\n    const result = regexp.exec(document.cookie);\n    if (result === null) {\n        return;\n    }\n    const [, encoded] = result as (string | undefined)[];\n    if (encoded === undefined) {\n        return;\n    }\n    // z.B. %20 durch Leerzeichen ersetzen\n    return decodeURIComponent(encoded);\n};\n\n/**\n * @param name Name des Cookies\n * @param value Wert des Cookies\n * @param expires Ablaufdatum in Millisekunden. Default: Session.\n * @param path Pfad des Cookies. Default: /.\n * @param domain Domain des Cookies. Default: aktuelle Domain.\n */\nconst setCookie = (\n    name: string,\n    value: string,\n    expires?: number,\n    path?: string,\n    domain?: string,\n    // eslint-disable-next-line max-params\n) => {\n    let cookieStr = `${encodeURIComponent(name)}=${encodeURIComponent(value)};`;\n\n    if (expires !== undefined) {\n        // TODO Das neue \"Temporal API\" bietet keine Konvertierung in einen UTC-String\n        const expirationDate = new Date(expires);\n        cookieStr += `expires=${expirationDate.toUTCString()};`;\n    }\n    if (path !== undefined) {\n        cookieStr += `path=${path};`;\n    }\n    if (domain !== undefined) {\n        cookieStr += `domain=${domain};`;\n    }\n    // Kein Zugriff mit JavaScript; Uebertragung nur mit HTTPS\n    // cookieStr += 'HttpOnly; Secure;'\n\n    // Uebertragung nur mit HTTPS\n    cookieStr += 'Secure;';\n\n    // Schutz vor XSS\n    cookieStr += 'SameSite=Strict;';\n\n    log.debug('StorageService.#setCookie: ', cookieStr);\n    // neues Cookie anlegen\n    document.cookie = cookieStr;\n\n    // cookieStore ist nur bei HTTPS verfuegbar und nicht in jedem Browser\n    // await cookieStore.set({\n    //     name,\n    //     value,\n    //     expires: ...,\n    //     domain,\n    // });\n};\n\n/**\n * @param name Name des Cookies\n * @param path Pfad des Cookies. Default: /.\n * @param domain Domain des Cookies. Default: aktuelle Domain.\n */\nconst deleteCookie = (name: string, path?: string, domain?: string) => {\n    if (getCookie(name) !== undefined) {\n        // expires in der Vergangenheit\n        setCookie(name, '', -1, path, domain);\n    }\n};\n\nexport const getAuthorization = () => getCookie(AUTHORIZATION);\n\nexport const saveAuthorization = (\n    authorization: string,\n    roles: string[],\n    expirationInMillis: number = Temporal.Now.instant().add({ minutes: 60 })\n        .epochMilliseconds,\n) => {\n    setCookie(AUTHORIZATION, authorization, expirationInMillis);\n    // z.B. ['admin', 'mitarbeiter'] -> 'admin,mitarbeiter'\n    const rolesStr: string = roles.join(SEPARATOR);\n    log.debug('StorageService.saveAuthorization: rolesStr=', rolesStr);\n    setCookie(ROLES, rolesStr, expirationInMillis);\n};\n\nexport const getRoles = () => {\n    // z.B. 'admin,mitarbeiter'\n    const rolesStr = getCookie(ROLES);\n    log.debug('StorageService.roles: rolesStr=', rolesStr);\n    // z.B. ['admin', 'mitarbeiter']\n    return rolesStr === undefined ? [] : rolesStr.split(SEPARATOR);\n};\n\nexport const deleteAuthorization = () => {\n    deleteCookie(AUTHORIZATION);\n    deleteCookie(ROLES);\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}