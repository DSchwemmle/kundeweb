{"ast":null,"code":"var _KundeReadService_instances, _KundeReadService_baseUrl, _KundeReadService_toKundeArrayOrError, _KundeReadService_toKundeOrError, _KundeReadService_buildFindError;\nimport { __classPrivateFieldGet } from \"tslib\";\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { HttpParams\n// eslint-disable-next-line import/no-unresolved\n} from '@angular/common/http';\nimport { toKunde } from './kundeServer';\nimport { of } from 'rxjs';\nimport { catchError, first, map } from 'rxjs/operators';\nimport { FindError } from './errors';\nimport log from 'loglevel';\nimport { paths } from '../../shared';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Methoden der Klasse HttpClient\n//  * get(url, options) – HTTP GET request\n//  * post(url, body, options) – HTTP POST request\n//  * put(url, body, options) – HTTP PUT request\n//  * patch(url, body, options) – HTTP PATCH request\n//  * delete(url, options) – HTTP DELETE request\n// Eine Service-Klasse ist eine \"normale\" Klasse gemaess ES 2015, die mittels\n// DI in eine Komponente injiziert werden kann, falls sie innerhalb von\n// provider: [...] bei einem Modulbereitgestellt wird.\n// Eine Komponente realisiert gemaess MVC-Pattern den Controller und die View.\n// Die Anwendungslogik wird vom Controller an Service-Klassen delegiert.\n// Service:\n// - wiederverwendbarer Code: in ggf. verschiedenen Controller\n// - Zugriff auf Daten, z.B. durch Aufruf von RESTful Web Services\n// - View (HTML-Template) <- Controller <- Service\n// https://angular.io/guide/singleton-services\n/**\r\n * Die Service-Klasse zu B&uuml;cher wird zum \"Root Application Injector\"\r\n * hinzugefuegt und ist in allen Klassen der Webanwendung verfuegbar.\r\n */\nexport class KundeReadService {\n  /**\r\n   * @param httpClient injizierter Service HttpClient (von Angular)\r\n   * @return void\r\n   */\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    _KundeReadService_instances.add(this);\n    _KundeReadService_baseUrl.set(this, paths.api);\n    log.debug('KundeReadService.constructor: baseUrl=', __classPrivateFieldGet(this, _KundeReadService_baseUrl, \"f\"));\n  }\n  /**\r\n   * Kunden anhand von Suchkriterien suchen\r\n   * @param suchkriterien Die Suchkriterien\r\n   * @returns Gefundene Kunden oder Statuscode des fehlerhaften GET-Requests\r\n   */\n  find(suchkriterien = undefined) {\n    log.debug('KundeService.find(): suchkriterien=', suchkriterien);\n    const params = this.suchkriterienToHttpParams(suchkriterien);\n    const url = __classPrivateFieldGet(this, _KundeReadService_baseUrl, \"f\");\n    log.debug(`KundeService.find(): url=${url}`);\n    return this.httpClient.get(url, {\n      params\n    })\n    // Observable: mehrere Werte werden \"lazy\" bereitgestellt, statt in einem JSON-Array\n    // pipe ist eine \"pure\" Funktion, die ein Observable in ein NEUES Observable transformiert\n    .pipe(first(),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    catchError((err, _$) => of(__classPrivateFieldGet(this, _KundeReadService_instances, \"m\", _KundeReadService_buildFindError).call(this, err))),\n    // entweder Observable<KundeServer[]> oder Observable<FindError>\n    map(result => __classPrivateFieldGet(this, _KundeReadService_instances, \"m\", _KundeReadService_toKundeArrayOrError).call(this, result)));\n    // Same-Origin-Policy verhindert Ajax-Datenabfragen an einen Server in\n    // einer anderen Domain. JSONP (= JSON mit Padding) ermoeglicht die\n    // Uebertragung von JSON-Daten ueber Domaingrenzen.\n    // Falls benoetigt, gibt es in Angular dafuer den Service Jsonp.\n  }\n  /**\r\n   * Ein Kunde anhand der ID suchen\r\n   * @param id Die ID des gesuchten Kundes\r\n   */\n  findById(id) {\n    log.debug('KundeReadService.findById: id=', id);\n    if (id === undefined) {\n      log.debug('KundeReadService.findById: Keine Id');\n      return of(__classPrivateFieldGet(this, _KundeReadService_instances, \"m\", _KundeReadService_buildFindError).call(this));\n    }\n    // wegen fehlender Versionsnummer (im ETag) nachladen\n    const url = `${__classPrivateFieldGet(this, _KundeReadService_baseUrl, \"f\")}/${id}`;\n    log.debug('KundeReadService.findById: url=', url);\n    return this.httpClient\n    /* eslint-disable object-curly-newline */.get(url, {\n      observe: 'response'\n    })\n    /* eslint-enable object-curly-newline */.pipe(\n    // 1 Datensatz empfangen und danach implizites \"unsubscribe\"\n    first(),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    catchError((err, _$) => {\n      const errResponse = err;\n      return of(__classPrivateFieldGet(this, _KundeReadService_instances, \"m\", _KundeReadService_buildFindError).call(this, errResponse));\n    }),\n    // entweder Observable<HttpResponse<KundeServer>> oder Observable<FindError>\n    map(restResult => __classPrivateFieldGet(this, _KundeReadService_instances, \"m\", _KundeReadService_toKundeOrError).call(this, restResult)));\n  }\n  /**\r\n   * Suchkriterien in Request-Parameter konvertieren.\r\n   * @param suchkriterien Suchkriterien fuer den GET-Request.\r\n   * @return Parameter fuer den GET-Request\r\n   */\n  suchkriterienToHttpParams(suchkriterien) {\n    log.debug('KundeService.suchkriterienToHttpParams(): suchkriterien=', suchkriterien);\n    let httpParams = new HttpParams();\n    if (suchkriterien === undefined) {\n      return httpParams;\n    }\n    const {\n      nachname,\n      geschlechtType,\n      familienstand,\n      interessen\n    } = suchkriterien;\n    const {\n      sport,\n      lesen,\n      reisen\n    } = interessen;\n    if (nachname !== '') {\n      httpParams = httpParams.set('nachname', nachname);\n    }\n    if (familienstand !== '') {\n      httpParams = httpParams.set('familienstand', familienstand);\n    }\n    if (geschlechtType !== '') {\n      httpParams = httpParams.set('geschlecht', geschlechtType);\n    }\n    if (sport) {\n      httpParams = httpParams.set('interesse', 'S');\n    }\n    if (lesen) {\n      httpParams = httpParams.set('interesse', 'L');\n    }\n    if (reisen) {\n      httpParams = httpParams.set('interesse', 'R');\n    }\n    return httpParams;\n  }\n}\n_KundeReadService_baseUrl = new WeakMap(), _KundeReadService_instances = new WeakSet(), _KundeReadService_toKundeArrayOrError = function _KundeReadService_toKundeArrayOrError(res) {\n  if (res instanceof FindError) {\n    return res;\n  }\n  // eslint-disable-next-line no-underscore-dangle\n  const kunden = res._embedded.kunden.map(kundeServer => toKunde(kundeServer));\n  log.debug('KundeService.mapFindResult(): kunden=', kunden);\n  return kunden;\n}, _KundeReadService_toKundeOrError = function _KundeReadService_toKundeOrError(restResult) {\n  if (restResult instanceof FindError) {\n    return restResult;\n  }\n  const {\n    body,\n    headers\n  } = restResult;\n  if (body === null) {\n    return __classPrivateFieldGet(this, _KundeReadService_instances, \"m\", _KundeReadService_buildFindError).call(this);\n  }\n  const etag = headers.get('ETag') ?? undefined;\n  log.debug('KundeReadService.#toKundeOrError: etag=', etag);\n  const kunde = toKunde(body, etag);\n  return kunde;\n}, _KundeReadService_buildFindError = function _KundeReadService_buildFindError(err) {\n  if (err === undefined) {\n    return new FindError(-1);\n  }\n  if (err.error instanceof ProgressEvent) {\n    const msg = 'Client-seitiger oder Netzwerkfehler';\n    log.error(msg, err.error);\n    return new FindError(-1, err);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const {\n    status,\n    error\n  } = err;\n  log.debug('KundeReadService.#buildFindError: status / Response-Body=', status, error);\n  return new FindError(status, err);\n};\nKundeReadService.ɵfac = function KundeReadService_Factory(t) {\n  return new (t || KundeReadService)(i0.ɵɵinject(i1.HttpClient));\n};\nKundeReadService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: KundeReadService,\n  factory: KundeReadService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpParams","toKunde","of","catchError","first","map","FindError","log","paths","KundeReadService","constructor","httpClient","_KundeReadService_baseUrl","api","debug","__classPrivateFieldGet","find","suchkriterien","undefined","params","suchkriterienToHttpParams","url","get","pipe","err","_$","result","findById","id","observe","errResponse","restResult","httpParams","nachname","geschlechtType","familienstand","interessen","sport","lesen","reisen","set","res","kunden","_embedded","kundeServer","body","headers","etag","kunde","error","ProgressEvent","msg","status","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Dominik\\software-engineering\\kundeweb\\src\\app\\kunde\\shared\\kundeRead.service.ts"],"sourcesContent":["/*\n * Copyright (C) 2015 - present Juergen Zimmermann, Hochschule Karlsruhe\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { Familienstand, GeschlechtType, type Kunde } from './kunde';\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport {\n    HttpClient,\n    type HttpErrorResponse,\n    HttpParams,\n    type HttpResponse,\n    // eslint-disable-next-line import/no-unresolved\n} from '@angular/common/http';\nimport { type KundeServer, toKunde } from './kundeServer';\nimport { type Observable, of } from 'rxjs';\nimport { catchError, first, map } from 'rxjs/operators';\nimport { FindError } from './errors';\nimport { Injectable } from '@angular/core';\nimport log from 'loglevel';\nimport { paths } from '../../shared';\n\nexport interface Suchkriterien {\n    nachname: string;\n    geschlechtType: GeschlechtType | '';\n    familienstand: Familienstand | '';\n    interessen: { sport: boolean; lesen: boolean; reisen: boolean };\n}\n\n// Todo: Suchkriterien wurden noch nicht eingefügt.\n\nexport interface KundenServer {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    _embedded: {\n        kunden: KundeServer[];\n    };\n}\n\n// Methoden der Klasse HttpClient\n//  * get(url, options) – HTTP GET request\n//  * post(url, body, options) – HTTP POST request\n//  * put(url, body, options) – HTTP PUT request\n//  * patch(url, body, options) – HTTP PATCH request\n//  * delete(url, options) – HTTP DELETE request\n\n// Eine Service-Klasse ist eine \"normale\" Klasse gemaess ES 2015, die mittels\n// DI in eine Komponente injiziert werden kann, falls sie innerhalb von\n// provider: [...] bei einem Modulbereitgestellt wird.\n// Eine Komponente realisiert gemaess MVC-Pattern den Controller und die View.\n// Die Anwendungslogik wird vom Controller an Service-Klassen delegiert.\n// Service:\n// - wiederverwendbarer Code: in ggf. verschiedenen Controller\n// - Zugriff auf Daten, z.B. durch Aufruf von RESTful Web Services\n// - View (HTML-Template) <- Controller <- Service\n// https://angular.io/guide/singleton-services\n\n/**\n * Die Service-Klasse zu B&uuml;cher wird zum \"Root Application Injector\"\n * hinzugefuegt und ist in allen Klassen der Webanwendung verfuegbar.\n */\n@Injectable({ providedIn: 'root' })\nexport class KundeReadService {\n    readonly #baseUrl = paths.api;\n\n    /**\n     * @param httpClient injizierter Service HttpClient (von Angular)\n     * @return void\n     */\n    constructor(private readonly httpClient: HttpClient) {\n        log.debug('KundeReadService.constructor: baseUrl=', this.#baseUrl);\n    }\n\n    /**\n     * Kunden anhand von Suchkriterien suchen\n     * @param suchkriterien Die Suchkriterien\n     * @returns Gefundene Kunden oder Statuscode des fehlerhaften GET-Requests\n     */\n    find(\n        suchkriterien: Suchkriterien | undefined = undefined, // eslint-disable-line unicorn/no-useless-undefined\n    ): Observable<FindError | Kunde[]> {\n        log.debug('KundeService.find(): suchkriterien=', suchkriterien);\n        const params = this.suchkriterienToHttpParams(suchkriterien);\n        const url = this.#baseUrl;\n        log.debug(`KundeService.find(): url=${url}`);\n\n        return (\n            this.httpClient\n                .get<KundenServer>(url, { params })\n\n                // Observable: mehrere Werte werden \"lazy\" bereitgestellt, statt in einem JSON-Array\n                // pipe ist eine \"pure\" Funktion, die ein Observable in ein NEUES Observable transformiert\n                .pipe(\n                    first(),\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    catchError((err: unknown, _$) =>\n                        of(this.#buildFindError(err as HttpErrorResponse)),\n                    ),\n\n                    // entweder Observable<KundeServer[]> oder Observable<FindError>\n                    map(result => this.#toKundeArrayOrError(result)),\n                )\n        );\n\n        // Same-Origin-Policy verhindert Ajax-Datenabfragen an einen Server in\n        // einer anderen Domain. JSONP (= JSON mit Padding) ermoeglicht die\n        // Uebertragung von JSON-Daten ueber Domaingrenzen.\n        // Falls benoetigt, gibt es in Angular dafuer den Service Jsonp.\n    }\n\n    /**\n     * Ein Kunde anhand der ID suchen\n     * @param id Die ID des gesuchten Kundes\n     */\n    findById(id: string | undefined): Observable<FindError | Kunde> {\n        log.debug('KundeReadService.findById: id=', id);\n\n        if (id === undefined) {\n            log.debug('KundeReadService.findById: Keine Id');\n            return of(this.#buildFindError());\n        }\n\n        // wegen fehlender Versionsnummer (im ETag) nachladen\n        const url = `${this.#baseUrl}/${id}`;\n        log.debug('KundeReadService.findById: url=', url);\n\n        return (\n            this.httpClient\n                /* eslint-disable object-curly-newline */\n                .get<KundeServer>(url, {\n                    observe: 'response',\n                })\n                /* eslint-enable object-curly-newline */\n\n                .pipe(\n                    // 1 Datensatz empfangen und danach implizites \"unsubscribe\"\n                    first(),\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    catchError((err: unknown, _$) => {\n                        const errResponse = err as HttpErrorResponse;\n                        return of(this.#buildFindError(errResponse));\n                    }),\n\n                    // entweder Observable<HttpResponse<KundeServer>> oder Observable<FindError>\n                    map(restResult => this.#toKundeOrError(restResult)),\n                )\n        );\n    }\n\n    #toKundeArrayOrError(res: FindError | KundenServer): FindError | Kunde[] {\n        if (res instanceof FindError) {\n            return res;\n        }\n        // eslint-disable-next-line no-underscore-dangle\n        const kunden = res._embedded.kunden.map(kundeServer =>\n            toKunde(kundeServer),\n        );\n        log.debug('KundeService.mapFindResult(): kunden=', kunden);\n        return kunden;\n    }\n\n    #toKundeOrError(\n        restResult: FindError | HttpResponse<KundeServer>,\n    ): FindError | Kunde {\n        if (restResult instanceof FindError) {\n            return restResult;\n        }\n\n        const { body, headers } = restResult;\n        if (body === null) {\n            return this.#buildFindError();\n        }\n\n        const etag = headers.get('ETag') ?? undefined;\n        log.debug('KundeReadService.#toKundeOrError: etag=', etag);\n\n        const kunde = toKunde(body, etag);\n        return kunde;\n    }\n\n    /**\n     * Suchkriterien in Request-Parameter konvertieren.\n     * @param suchkriterien Suchkriterien fuer den GET-Request.\n     * @return Parameter fuer den GET-Request\n     */\n    private suchkriterienToHttpParams(\n        suchkriterien: Suchkriterien | undefined,\n    ): HttpParams {\n        log.debug(\n            'KundeService.suchkriterienToHttpParams(): suchkriterien=',\n            suchkriterien,\n        );\n        let httpParams = new HttpParams();\n\n        if (suchkriterien === undefined) {\n            return httpParams;\n        }\n\n        const { nachname, geschlechtType, familienstand, interessen } =\n            suchkriterien;\n        const { sport, lesen, reisen } = interessen;\n\n        if (nachname !== '') {\n            httpParams = httpParams.set('nachname', nachname);\n        }\n        if (familienstand !== '') {\n            httpParams = httpParams.set('familienstand', familienstand);\n        }\n        if (geschlechtType !== '') {\n            httpParams = httpParams.set('geschlecht', geschlechtType);\n        }\n        if (sport) {\n            httpParams = httpParams.set('interesse', 'S');\n        }\n        if (lesen) {\n            httpParams = httpParams.set('interesse', 'L');\n        }\n        if (reisen) {\n            httpParams = httpParams.set('interesse', 'R');\n        }\n        return httpParams;\n    }\n\n    #buildFindError(err?: HttpErrorResponse) {\n        if (err === undefined) {\n            return new FindError(-1);\n        }\n\n        if (err.error instanceof ProgressEvent) {\n            const msg = 'Client-seitiger oder Netzwerkfehler';\n            log.error(msg, err.error);\n            return new FindError(-1, err);\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const { status, error } = err;\n        log.debug(\n            'KundeReadService.#buildFindError: status / Response-Body=',\n            status,\n            error,\n        );\n        return new FindError(status, err);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}