{"ast":null,"code":"var _KundeWriteService_instances, _KundeWriteService_baseUrl, _KundeWriteService_mapSaveResultToId, _KundeWriteService_mapUpdateResultToVersion;\nimport { __classPrivateFieldGet } from \"tslib\";\n/*\r\n * Copyright (C) 2015 - present Juergen Zimmermann, Hochschule Karlsruhe\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { HttpHeaders, HttpResponse\n// eslint-disable-next-line import/no-unresolved\n} from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { RemoveError, SaveError, UpdateError } from './errors';\nimport { catchError, first, map } from 'rxjs/operators';\nimport log from 'loglevel';\nimport { paths } from '../../shared';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Methoden der Klasse HttpClient\n//  * get(url, options) – HTTP GET request\n//  * post(url, body, options) – HTTP POST request\n//  * put(url, body, options) – HTTP PUT request\n//  * patch(url, body, options) – HTTP PATCH request\n//  * delete(url, options) – HTTP DELETE request\n// Eine Service-Klasse ist eine \"normale\" Klasse gemaess ES 2015, die mittels\n// DI in eine Komponente injiziert werden kann, falls sie innerhalb von\n// provider: [...] bei einem Modul bereitgestellt wird.\n// Eine Komponente realisiert gemaess MVC-Pattern den Controller und die View.\n// Die Anwendungslogik wird vom Controller an Service-Klassen delegiert.\n/**\r\n * Die Service-Klasse zu B&uuml;cher wird zum \"Root Application Injector\"\r\n * hinzugefuegt und ist in allen Klassen der Webanwendung verfuegbar.\r\n */\nexport class KundeWriteService {\n  /**\r\n   * @param httpClient injizierter Service HttpClient (von Angular)\r\n   * @return void\r\n   */\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    _KundeWriteService_instances.add(this);\n    _KundeWriteService_baseUrl.set(this, paths.api);\n    log.debug('KundeWriteService.constructor: baseUrl=', __classPrivateFieldGet(this, _KundeWriteService_baseUrl, \"f\"));\n  }\n  /**\r\n   * Einen neuen Kunden anlegen\r\n   * @param neuerKunde Das JSON-Objekt mit dem neuen Kunde\r\n   */\n  save(kunde) {\n    log.debug('KundeWriteService.save: kunde=', kunde);\n    /* eslint-disable @typescript-eslint/naming-convention */\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Accept: 'text/plain'\n    });\n    /* eslint-enable @typescript-eslint/naming-convention */\n    const user = {\n      username: 'test',\n      password: 'Pass1234'\n    };\n    const customBody = {\n      kunde,\n      user\n    };\n    const json = JSON.stringify(customBody);\n    log.debug('JSON = ', json);\n    return this.httpClient.post(__classPrivateFieldGet(this, _KundeWriteService_baseUrl, \"f\"), json, {\n      headers,\n      observe: 'response',\n      responseType: 'text'\n    }).pipe(first(),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    catchError((err, _$) => {\n      const errResponse = err;\n      return of(new SaveError(errResponse.status, errResponse));\n    }),\n    // entweder Observable<HttpResponse<string>> oder Observable<SaveError>\n    map(result => __classPrivateFieldGet(this, _KundeWriteService_instances, \"m\", _KundeWriteService_mapSaveResultToId).call(this, result)));\n  }\n  /**\r\n   * Ein vorhandenes Kunde aktualisieren\r\n   * @param kunde Das JSON-Objekt mit den aktualisierten Kundedaten\r\n   */\n  update(kunde) {\n    log.debug('KundeWriteService.update: kunde=', kunde);\n    // id, version und interessen gehoeren nicht zu den serverseitigen Nutzdaten\n    const {\n      id,\n      version,\n      ...kundeDTO\n    } = kunde;\n    if (version === undefined) {\n      const msg = `Keine Versionsnummer fuer den Kunden ${id}`;\n      log.debug(msg);\n      return of(new UpdateError(-1, msg));\n    }\n    const url = `${__classPrivateFieldGet(this, _KundeWriteService_baseUrl, \"f\")}/${id}`;\n    /* eslint-disable @typescript-eslint/naming-convention */\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Accept: 'text/plain',\n      'If-Match': `\"${version}\"`\n    });\n    /* eslint-enable @typescript-eslint/naming-convention */\n    log.debug('KundeWriteService.update: headers=', headers);\n    log.debug('KundeWriteService.update: kundeDTO=', kundeDTO);\n    return this.httpClient.put(url, kundeDTO, {\n      headers,\n      observe: 'response'\n    }).pipe(first(),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    catchError((err, _$) => {\n      const errResponse = err;\n      log.debug('KundeWriteService.update: err=', err);\n      return of(new UpdateError(errResponse.status, errResponse));\n    }), map(result => __classPrivateFieldGet(this, _KundeWriteService_instances, \"m\", _KundeWriteService_mapUpdateResultToVersion).call(this, result)), map(versionOderError => {\n      if (versionOderError instanceof UpdateError) {\n        return versionOderError;\n      }\n      log.debug('blabla', kundeDTO);\n      kunde.version = versionOderError;\n      return kunde;\n    }));\n  }\n  /**\r\n   * Ein Kunde l&ouml;schen\r\n   * @param kunde Das JSON-Objekt mit dem zu loeschenden Kunde\r\n   */\n  remove(kunde) {\n    log.debug('KundeWriteService.remove: kunde=', kunde);\n    const url = `${__classPrivateFieldGet(this, _KundeWriteService_baseUrl, \"f\")}/${kunde.id}`;\n    return this.httpClient.delete(url).pipe(first(),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    catchError((err, _$) => {\n      const errResponse = err;\n      return of(new RemoveError(errResponse.status));\n    }), map(result => {\n      if (result instanceof RemoveError) {\n        return result;\n      }\n      return {};\n    }));\n  }\n}\n_KundeWriteService_baseUrl = new WeakMap(), _KundeWriteService_instances = new WeakSet(), _KundeWriteService_mapSaveResultToId = function _KundeWriteService_mapSaveResultToId(result) {\n  if (!(result instanceof HttpResponse)) {\n    return result;\n  }\n  const response = result;\n  log.debug('KundeWriteService.#mapSaveResultToId: map: response', response);\n  // id aus Header \"Locaction\" extrahieren\n  const location = response.headers.get('Location');\n  const id = location?.slice(location.lastIndexOf('/') + 1);\n  if (id === undefined) {\n    return new SaveError(-1, 'Keine Id');\n  }\n  return id;\n}, _KundeWriteService_mapUpdateResultToVersion = function _KundeWriteService_mapUpdateResultToVersion(result) {\n  if (result instanceof UpdateError) {\n    return result;\n  }\n  const response = result;\n  log.debug('KundeWriteService.#mapUpdateResultToVersion: response', response);\n  const etag = response.headers.get('ETag');\n  log.debug('KundeWriteService.#mapUpdateResultToVersion: etag=', etag);\n  const ende = etag?.lastIndexOf('\"');\n  const versionStr = etag?.slice(1, ende) ?? '1';\n  return Number.parseInt(versionStr, 10);\n};\nKundeWriteService.ɵfac = function KundeWriteService_Factory(t) {\n  return new (t || KundeWriteService)(i0.ɵɵinject(i1.HttpClient));\n};\nKundeWriteService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: KundeWriteService,\n  factory: KundeWriteService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","HttpResponse","of","RemoveError","SaveError","UpdateError","catchError","first","map","log","paths","KundeWriteService","constructor","httpClient","_KundeWriteService_baseUrl","api","debug","__classPrivateFieldGet","save","kunde","headers","Accept","user","username","password","customBody","json","JSON","stringify","post","observe","responseType","pipe","err","_$","errResponse","status","result","update","id","version","kundeDTO","undefined","msg","url","put","versionOderError","remove","delete","response","location","get","slice","lastIndexOf","etag","ende","versionStr","Number","parseInt","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Dominik\\software-engineering\\kundeweb\\src\\app\\kunde\\shared\\kundeWrite.service.ts"],"sourcesContent":["/*\n * Copyright (C) 2015 - present Juergen Zimmermann, Hochschule Karlsruhe\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport {\n    HttpClient,\n    type HttpErrorResponse,\n    HttpHeaders,\n    HttpResponse,\n    // eslint-disable-next-line import/no-unresolved\n} from '@angular/common/http';\nimport { type Kunde, type User } from './kunde';\nimport { type Observable, of } from 'rxjs';\nimport { RemoveError, SaveError, UpdateError } from './errors';\nimport { catchError, first, map } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport log from 'loglevel';\nimport { paths } from '../../shared';\n\n// Methoden der Klasse HttpClient\n//  * get(url, options) – HTTP GET request\n//  * post(url, body, options) – HTTP POST request\n//  * put(url, body, options) – HTTP PUT request\n//  * patch(url, body, options) – HTTP PATCH request\n//  * delete(url, options) – HTTP DELETE request\n\n// Eine Service-Klasse ist eine \"normale\" Klasse gemaess ES 2015, die mittels\n// DI in eine Komponente injiziert werden kann, falls sie innerhalb von\n// provider: [...] bei einem Modul bereitgestellt wird.\n// Eine Komponente realisiert gemaess MVC-Pattern den Controller und die View.\n// Die Anwendungslogik wird vom Controller an Service-Klassen delegiert.\n\n/**\n * Die Service-Klasse zu B&uuml;cher wird zum \"Root Application Injector\"\n * hinzugefuegt und ist in allen Klassen der Webanwendung verfuegbar.\n */\n@Injectable({ providedIn: 'root' })\nexport class KundeWriteService {\n    readonly #baseUrl = paths.api;\n\n    /**\n     * @param httpClient injizierter Service HttpClient (von Angular)\n     * @return void\n     */\n    constructor(private readonly httpClient: HttpClient) {\n        log.debug('KundeWriteService.constructor: baseUrl=', this.#baseUrl);\n    }\n\n    /**\n     * Einen neuen Kunden anlegen\n     * @param neuerKunde Das JSON-Objekt mit dem neuen Kunde\n     */\n    save(kunde: Kunde): Observable<SaveError | string> {\n        log.debug('KundeWriteService.save: kunde=', kunde);\n\n        /* eslint-disable @typescript-eslint/naming-convention */\n        const headers = new HttpHeaders({\n            'Content-Type': 'application/json',\n            Accept: 'text/plain',\n        });\n        /* eslint-enable @typescript-eslint/naming-convention */\n\n        const user: User = {\n            username: 'test',\n            password: 'Pass1234',\n        };\n\n        const customBody = {\n            kunde,\n            user,\n        };\n\n        const json = JSON.stringify(customBody);\n        log.debug('JSON = ', json);\n\n        return this.httpClient\n            .post(this.#baseUrl, json, {\n                headers,\n                observe: 'response',\n                responseType: 'text',\n            })\n            .pipe(\n                first(),\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                catchError((err: unknown, _$) => {\n                    const errResponse = err as HttpErrorResponse;\n                    return of(new SaveError(errResponse.status, errResponse));\n                }),\n\n                // entweder Observable<HttpResponse<string>> oder Observable<SaveError>\n                map(result => this.#mapSaveResultToId(result)),\n            );\n    }\n\n    #mapSaveResultToId(\n        result: HttpResponse<string> | SaveError,\n    ): SaveError | string {\n        if (!(result instanceof HttpResponse)) {\n            return result;\n        }\n\n        const response = result;\n        log.debug(\n            'KundeWriteService.#mapSaveResultToId: map: response',\n            response,\n        );\n\n        // id aus Header \"Locaction\" extrahieren\n        const location = response.headers.get('Location');\n        const id = location?.slice(location.lastIndexOf('/') + 1);\n\n        if (id === undefined) {\n            return new SaveError(-1, 'Keine Id');\n        }\n\n        return id;\n    }\n\n    /**\n     * Ein vorhandenes Kunde aktualisieren\n     * @param kunde Das JSON-Objekt mit den aktualisierten Kundedaten\n     */\n    update(kunde: Kunde): Observable<Kunde | UpdateError> {\n        log.debug('KundeWriteService.update: kunde=', kunde);\n\n        // id, version und interessen gehoeren nicht zu den serverseitigen Nutzdaten\n        const { id, version, ...kundeDTO } = kunde;\n        if (version === undefined) {\n            const msg = `Keine Versionsnummer fuer den Kunden ${id}`;\n            log.debug(msg);\n            return of(new UpdateError(-1, msg));\n        }\n\n        const url = `${this.#baseUrl}/${id}`;\n        /* eslint-disable @typescript-eslint/naming-convention */\n        const headers = new HttpHeaders({\n            'Content-Type': 'application/json',\n            Accept: 'text/plain',\n            'If-Match': `\"${version}\"`,\n        });\n        /* eslint-enable @typescript-eslint/naming-convention */\n        log.debug('KundeWriteService.update: headers=', headers);\n\n        log.debug('KundeWriteService.update: kundeDTO=', kundeDTO);\n        return this.httpClient\n            .put(url, kundeDTO, { headers, observe: 'response' })\n            .pipe(\n                first(),\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                catchError((err: unknown, _$) => {\n                    const errResponse = err as HttpErrorResponse;\n                    log.debug('KundeWriteService.update: err=', err);\n                    return of(new UpdateError(errResponse.status, errResponse));\n                }),\n\n                map(result => this.#mapUpdateResultToVersion(result)),\n\n                map(versionOderError => {\n                    if (versionOderError instanceof UpdateError) {\n                        return versionOderError;\n                    }\n                    log.debug('blabla', kundeDTO);\n                    kunde.version = versionOderError;\n                    return kunde;\n                }),\n            );\n    }\n\n    #mapUpdateResultToVersion(\n        result: HttpResponse<unknown> | UpdateError,\n    ): UpdateError | number {\n        if (result instanceof UpdateError) {\n            return result;\n        }\n\n        const response = result;\n        log.debug(\n            'KundeWriteService.#mapUpdateResultToVersion: response',\n            response,\n        );\n        const etag = response.headers.get('ETag');\n        log.debug('KundeWriteService.#mapUpdateResultToVersion: etag=', etag);\n\n        const ende = etag?.lastIndexOf('\"');\n        const versionStr = etag?.slice(1, ende) ?? '1';\n        return Number.parseInt(versionStr, 10);\n    }\n\n    /**\n     * Ein Kunde l&ouml;schen\n     * @param kunde Das JSON-Objekt mit dem zu loeschenden Kunde\n     */\n    remove(kunde: Kunde): Observable<Record<string, unknown> | RemoveError> {\n        log.debug('KundeWriteService.remove: kunde=', kunde);\n        const url = `${this.#baseUrl}/${kunde.id}`;\n\n        return this.httpClient.delete(url).pipe(\n            first(),\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            catchError((err: unknown, _$) => {\n                const errResponse = err as HttpErrorResponse;\n                return of(new RemoveError(errResponse.status));\n            }),\n\n            map(result => {\n                if (result instanceof RemoveError) {\n                    return result;\n                }\n                return {};\n            }),\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}