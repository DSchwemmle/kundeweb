{"ast":null,"code":"var _JwtService_instances, _JwtService_handleLogin, _JwtService_decodeToken;\nimport { __classPrivateFieldGet } from \"tslib\";\n/*\r\n * Copyright (C) 2016 - present Juergen Zimmermann, Hochschule Karlsruhe\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { catchError, first, map } from 'rxjs/operators';\nimport { Temporal } from '@js-temporal/polyfill';\nimport log from 'loglevel';\nimport { of } from 'rxjs';\nimport { paths } from '../shared/paths';\nimport { saveAuthorization } from './storage.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class JwtService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    _JwtService_instances.add(this);\n    log.debug('JwtService.constructor()');\n  }\n  login(username, password) {\n    const loginPath = paths.login;\n    log.debug('JwtService.login: loginPath=', loginPath);\n    /* eslint-disable @typescript-eslint/naming-convention */\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'text/plain'\n    });\n    /* eslint-enable @typescript-eslint/naming-convention */\n    return this.httpClient.post(loginPath, `username=${username}&password=${password}`, {\n      headers,\n      observe: 'response',\n      responseType: 'json'\n    }).pipe(\n    // den 1. Datensatz empfangen und danach implizites \"unsubscribe\"\n    first(), catchError(err => {\n      log.debug('JwtService.login: err=', err);\n      // z.B. Statuscode 401 (Unauthorized) oder 504 (Gateway Timeout)\n      return of(err);\n    }), map(result => __classPrivateFieldGet(this, _JwtService_instances, \"m\", _JwtService_handleLogin).call(this, result)));\n  }\n}\n_JwtService_instances = new WeakSet(), _JwtService_handleLogin = function _JwtService_handleLogin(result) {\n  if (result instanceof HttpErrorResponse) {\n    log.error('JwtService.login: result=', result);\n    // TODO Fehlerbehandlung fuer falsche Logindaten\n    return;\n  }\n  const {\n    status,\n    ok,\n    body\n  } = result;\n  log.debug('JwtService.login: status=', status);\n  log.debug('JwtService.login: body', body);\n  if (!ok || body === null) {\n    const {\n      statusText\n    } = result;\n    log.error('JwtService.login: statusText', statusText);\n    return;\n  }\n  const {\n    token,\n    roles\n  } = body;\n  const authorization = `Bearer ${token}`;\n  log.debug('JwtService.login: authorization=', authorization);\n  const decodedToken = __classPrivateFieldGet(this, _JwtService_instances, \"m\", _JwtService_decodeToken).call(this, token); // eslint-disable-line @typescript-eslint/no-unsafe-assignment\n  log.debug('JwtService.login: decodedToken', decodedToken);\n  if (decodedToken.exp === undefined) {\n    log.warn('JwtService.login: exp fehlt');\n    return;\n  }\n  // Expiration beim Token: Sekunden seit 1.1.1970 UTC\n  // Cookie: Millisekunden in eigener Zeitzone\n  const expiration = decodedToken.exp * JwtService.MILLIS_PER_SECOND + JwtService.TIMEZONE_OFFSET_MS;\n  log.debug('JwtService.login: expiration=', expiration);\n  saveAuthorization(authorization, roles, expiration);\n  return roles;\n}, _JwtService_decodeToken = function _JwtService_decodeToken(token) {\n  // Destructuring\n  const [, payload, signature] = token.split('.');\n  if (signature === undefined) {\n    log.error('JwtService.#decodeToken: JWT enthaelt keine Signature');\n    return;\n  }\n  let base64Token = payload?.replace(/-/gu, '+')?.replace(/_/gu, '/');\n  if (base64Token === undefined) {\n    return Promise.reject(new Error('Interner Fehler beim Einloggen'));\n  }\n  /* eslint-disable @typescript-eslint/no-magic-numbers */\n  switch (base64Token.length % 4) {\n    case 0:\n      {\n        break;\n      }\n    case 2:\n      {\n        base64Token += '==';\n        break;\n      }\n    case 3:\n      {\n        base64Token += '=';\n        break;\n      }\n    default:\n      {\n        log.error('JwtService.#decodeToken: Laenge des JWT in Base64 ist falsch.');\n        return;\n      }\n  }\n  /* eslint-enable @typescript-eslint/no-magic-numbers */\n  // http://xkr.us/articles/javascript/encode-compare\n  // http://stackoverflow.com/questions/75980/when-are-you-supposed-to-use-escape-instead-of-encodeuri-encodeuricomponent#23842171\n  const decodedStr = decodeURIComponent(encodeURIComponent(window.atob(base64Token)));\n  return JSON.parse(decodedStr);\n};\nJwtService.NANOS_PER_MILLIS = 1000000;\nJwtService.MILLIS_PER_SECOND = 1000;\nJwtService.TIMEZONE_OFFSET_MS = Temporal.Now.timeZone().getOffsetNanosecondsFor(Temporal.Now.instant()) / JwtService.NANOS_PER_MILLIS;\nJwtService.ɵfac = function JwtService_Factory(t) {\n  return new (t || JwtService)(i0.ɵɵinject(i1.HttpClient));\n};\nJwtService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JwtService,\n  factory: JwtService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpErrorResponse","HttpHeaders","catchError","first","map","Temporal","log","of","paths","saveAuthorization","JwtService","constructor","httpClient","debug","login","username","password","loginPath","headers","Accept","post","observe","responseType","pipe","err","result","__classPrivateFieldGet","error","status","ok","body","statusText","token","roles","authorization","decodedToken","exp","undefined","warn","expiration","MILLIS_PER_SECOND","TIMEZONE_OFFSET_MS","payload","signature","split","base64Token","replace","Promise","reject","Error","length","decodedStr","decodeURIComponent","encodeURIComponent","window","atob","JSON","parse","Now","timeZone","getOffsetNanosecondsFor","instant","NANOS_PER_MILLIS","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Dominik\\software-engineering\\kundeweb\\src\\app\\auth\\jwt.service.ts"],"sourcesContent":["/*\n * Copyright (C) 2016 - present Juergen Zimmermann, Hochschule Karlsruhe\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport {\n    HttpClient,\n    HttpErrorResponse,\n    HttpHeaders,\n    type HttpResponse,\n} from '@angular/common/http';\nimport { catchError, first, map } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { Temporal } from '@js-temporal/polyfill';\nimport log from 'loglevel';\nimport { of } from 'rxjs';\nimport { paths } from '../shared/paths';\nimport { saveAuthorization } from './storage.service';\n\ninterface LoginResponse {\n    token: string;\n    roles: string[];\n}\n\n@Injectable({ providedIn: 'root' })\nexport class JwtService {\n    private static readonly NANOS_PER_MILLIS = 1_000_000;\n\n    private static readonly MILLIS_PER_SECOND = 1000;\n\n    private static readonly TIMEZONE_OFFSET_MS =\n        Temporal.Now.timeZone().getOffsetNanosecondsFor(\n            Temporal.Now.instant(),\n        ) / JwtService.NANOS_PER_MILLIS;\n\n    constructor(private readonly httpClient: HttpClient) {\n        log.debug('JwtService.constructor()');\n    }\n\n    login(username: string | undefined, password: string | undefined) {\n        const loginPath = paths.login;\n        log.debug('JwtService.login: loginPath=', loginPath);\n\n        /* eslint-disable @typescript-eslint/naming-convention */\n        const headers = new HttpHeaders({\n            'Content-Type': 'application/x-www-form-urlencoded',\n            Accept: 'text/plain',\n        });\n        /* eslint-enable @typescript-eslint/naming-convention */\n\n        return this.httpClient\n            .post<LoginResponse>(\n                loginPath,\n                `username=${username}&password=${password}`,\n                {\n                    headers,\n                    observe: 'response',\n                    responseType: 'json',\n                },\n            )\n            .pipe(\n                // den 1. Datensatz empfangen und danach implizites \"unsubscribe\"\n                first(),\n                catchError((err: unknown) => {\n                    log.debug('JwtService.login: err=', err);\n                    // z.B. Statuscode 401 (Unauthorized) oder 504 (Gateway Timeout)\n                    return of(err as HttpErrorResponse);\n                }),\n\n                map(result => this.#handleLogin(result)),\n            );\n    }\n\n    #handleLogin(result: HttpErrorResponse | HttpResponse<LoginResponse>) {\n        if (result instanceof HttpErrorResponse) {\n            log.error('JwtService.login: result=', result);\n            // TODO Fehlerbehandlung fuer falsche Logindaten\n            return;\n        }\n        const { status, ok, body } = result;\n        log.debug('JwtService.login: status=', status);\n        log.debug('JwtService.login: body', body);\n        if (!ok || body === null) {\n            const { statusText } = result;\n            log.error('JwtService.login: statusText', statusText);\n            return;\n        }\n\n        const { token, roles } = body;\n        const authorization = `Bearer ${token}`;\n        log.debug('JwtService.login: authorization=', authorization);\n\n        const decodedToken = this.#decodeToken(token); // eslint-disable-line @typescript-eslint/no-unsafe-assignment\n        log.debug('JwtService.login: decodedToken', decodedToken);\n        if (decodedToken.exp === undefined) {\n            log.warn('JwtService.login: exp fehlt');\n            return;\n        }\n        // Expiration beim Token: Sekunden seit 1.1.1970 UTC\n        // Cookie: Millisekunden in eigener Zeitzone\n        const expiration =\n            decodedToken.exp * JwtService.MILLIS_PER_SECOND +\n            JwtService.TIMEZONE_OFFSET_MS;\n        log.debug('JwtService.login: expiration=', expiration);\n\n        saveAuthorization(authorization, roles, expiration);\n        return roles;\n    }\n\n    // https://github.com/auth0/angular2-jwt/blob/master/angular2-jwt.ts#L147\n    #decodeToken(token: string) {\n        // Destructuring\n        const [, payload, signature] = token.split('.') as (\n            | string\n            | undefined\n        )[];\n        if (signature === undefined) {\n            log.error('JwtService.#decodeToken: JWT enthaelt keine Signature');\n            return;\n        }\n\n        let base64Token = payload?.replace(/-/gu, '+')?.replace(/_/gu, '/');\n        if (base64Token === undefined) {\n            return Promise.reject(new Error('Interner Fehler beim Einloggen'));\n        }\n        /* eslint-disable @typescript-eslint/no-magic-numbers */\n        switch (base64Token.length % 4) {\n            case 0: {\n                break;\n            }\n            case 2: {\n                base64Token += '==';\n                break;\n            }\n            case 3: {\n                base64Token += '=';\n                break;\n            }\n            default: {\n                log.error(\n                    'JwtService.#decodeToken: Laenge des JWT in Base64 ist falsch.',\n                );\n                return;\n            }\n        }\n        /* eslint-enable @typescript-eslint/no-magic-numbers */\n\n        // http://xkr.us/articles/javascript/encode-compare\n        // http://stackoverflow.com/questions/75980/when-are-you-supposed-to-use-escape-instead-of-encodeuri-encodeuricomponent#23842171\n        const decodedStr = decodeURIComponent(\n            encodeURIComponent(window.atob(base64Token)),\n        );\n\n        return JSON.parse(decodedStr);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}