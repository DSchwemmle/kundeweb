{"ast":null,"code":"var _AuthService_instances, _AuthService_handleLogin;\nimport { __classPrivateFieldGet } from \"tslib\";\n/*\r\n * Copyright (C) 2016 - present Juergen Zimmermann, Hochschule Karlsruhe\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\nimport { deleteAuthorization, getAuthorization, getRoles } from './storage.service';\nimport { first, tap } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport log from 'loglevel';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./jwt.service\";\nexport const ROLLE_ADMIN = 'admin';\n// Spring Security:\n// export const ROLLE_ADMIN = 'ROLE_ADMIN'\nexport class AuthService {\n  constructor(jwtService) {\n    this.jwtService = jwtService;\n    _AuthService_instances.add(this);\n    // in RxJS: Observables = Event-Streaming mit Promises\n    // Subject statt Basisklasse Observable: in login() und logout() wird next() aufgerufen\n    // Suffix \"$\" wird als \"Finnish Notation\" bezeichnet https://medium.com/@benlesh/observables-and-finnish-notation-df8356ed1c9b\n    this.isLoggedIn$ = new Subject();\n    // public fuer z.B. nav.component mit der Property isAdmin\n    this.rollen$ = new Subject();\n    // OnInit ist nur bei @Component moeglich\n    if (this.isLoggedIn) {\n      log.debug('AuthService.constructor: bereits eingeloggt');\n      this.isLoggedIn$.next(true);\n      const rollen = this.roles;\n      if (rollen.length > 0) {\n        log.debug('AuthService.constructor: rollen=', rollen);\n        this.rollen$.next(rollen);\n      }\n      return;\n    }\n    log.debug('AuthService.constructor: noch nicht eingeloggt');\n    this.isLoggedIn$.next(false);\n  }\n  /**\r\n   * @param username als String\r\n   * @param password als String\r\n   * @return void\r\n   */\n  login(username, password) {\n    log.debug(`AuthService.login: username=${username}, password=${password}`);\n    this.jwtService.login(username, password).pipe(\n    // den 1. Datensatz empfangen und danach implizites \"unsubscribe\"\n    first(), tap(result => __classPrivateFieldGet(this, _AuthService_instances, \"m\", _AuthService_handleLogin).call(this, result))).subscribe();\n  }\n  /**\r\n   * @return void\r\n   */\n  logout() {\n    log.debug('AuthService.logout()');\n    deleteAuthorization();\n    this.isLoggedIn$.next(false);\n    this.rollen$.next([]);\n  }\n  /**\r\n   * @return String fuer JWT oder Basic-Authentifizierung\r\n   */\n  get authorization() {\n    return getAuthorization();\n  }\n  /**\r\n   * Statische Abfrage, z.B. beim Start des Browsers, wenn noch kein\r\n   * Click-Ereignis eingetreten ist.\r\n   * @return true, falls ein User eingeloggt ist; sonst false.\r\n   */\n  get isLoggedIn() {\n    return getAuthorization() !== undefined;\n  }\n  /**\r\n   * Statische Abfrage, z.B. beim Start des Browsers, wenn noch kein\r\n   * Click-Ereignis eingetreten ist oder bei der Anzeige des Suchergebnisses.\r\n   * @return true, falls ein User in der Rolle \"admin\" eingeloggt ist;\r\n   *         sonst false.\r\n   */\n  get isAdmin() {\n    return getRoles().includes(ROLLE_ADMIN);\n  }\n  /**\r\n   * Statische Abfrage, z.B. beim Start des Browsers, wenn noch kein\r\n   * Click-Ereignis eingetreten ist oder bei der Anzeige des Suchergebnisses.\r\n   * @return Array der vorhandenen Rollen.\r\n   */\n  get roles() {\n    return getRoles();\n  }\n}\n_AuthService_instances = new WeakSet(), _AuthService_handleLogin = function _AuthService_handleLogin(result) {\n  log.debug('AuthService.login: result', result);\n  if (result === undefined) {\n    this.isLoggedIn$.next(false);\n    this.rollen$.next([]);\n  } else {\n    this.isLoggedIn$.next(true);\n    this.rollen$.next(result);\n  }\n};\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.JwtService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;AAiBA,SACIA,mBAAmB,EACnBC,gBAAgB,EAChBC,QAAQ,QACL,mBAAmB;AAC1B,SAASC,KAAK,EAAEC,GAAG,QAAQ,gBAAgB;AAG3C,SAASC,OAAO,QAAQ,MAAM;AAC9B,OAAOC,GAAG,MAAM,UAAU;;;AAE1B,OAAO,MAAMC,WAAW,GAAG,OAAO;AAClC;AACA;AAGA,OAAM,MAAOC,WAAW;EASpBC,YAA6BC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;;IARvC;IACA;IACA;IACS,gBAAW,GAAG,IAAIL,OAAO,EAAW;IAE7C;IACS,YAAO,GAAG,IAAIA,OAAO,EAAY;IAGtC;IACA,IAAI,IAAI,CAACM,UAAU,EAAE;MACjBL,GAAG,CAACM,KAAK,CAAC,6CAA6C,CAAC;MACxD,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,CAAC;MAE3B,MAAMC,MAAM,GAAG,IAAI,CAACC,KAAK;MACzB,IAAID,MAAM,CAACE,MAAM,GAAG,CAAC,EAAE;QACnBX,GAAG,CAACM,KAAK,CAAC,kCAAkC,EAAEG,MAAM,CAAC;QACrD,IAAI,CAACG,OAAO,CAACJ,IAAI,CAACC,MAAM,CAAC;;MAG7B;;IAGJT,GAAG,CAACM,KAAK,CAAC,gDAAgD,CAAC;IAC3D,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,KAAK,CAAC;EAChC;EAEA;;;;;EAKAK,KAAK,CAACC,QAA4B,EAAEC,QAA4B;IAC5Df,GAAG,CAACM,KAAK,CACL,+BAA+BQ,QAAQ,cAAcC,QAAQ,EAAE,CAClE;IAED,IAAI,CAACX,UAAU,CACVS,KAAK,CAACC,QAAQ,EAAEC,QAAQ,CAAC,CACzBC,IAAI;IACD;IACAnB,KAAK,EAAE,EACPC,GAAG,CAACmB,MAAM,IAAIC,2BAAI,wDAAa,MAAjB,IAAI,EAAcD,MAAM,CAAC,CAAC,CAC3C,CACAE,SAAS,EAAE;EACpB;EAaA;;;EAGAC,MAAM;IACFpB,GAAG,CAACM,KAAK,CAAC,sBAAsB,CAAC;IACjCZ,mBAAmB,EAAE;IACrB,IAAI,CAACa,WAAW,CAACC,IAAI,CAAC,KAAK,CAAC;IAC5B,IAAI,CAACI,OAAO,CAACJ,IAAI,CAAC,EAAE,CAAC;EACzB;EAEA;;;EAGA,IAAIa,aAAa;IACb,OAAO1B,gBAAgB,EAAE;EAC7B;EAEA;;;;;EAKA,IAAIU,UAAU;IACV,OAAOV,gBAAgB,EAAE,KAAK2B,SAAS;EAC3C;EAEA;;;;;;EAMA,IAAIC,OAAO;IACP,OAAO3B,QAAQ,EAAE,CAAC4B,QAAQ,CAACvB,WAAW,CAAC;EAC3C;EAEA;;;;;EAKA,IAAIS,KAAK;IACL,OAAOd,QAAQ,EAAE;EACrB;;qGAtDaqB,MAA4B;EACrCjB,GAAG,CAACM,KAAK,CAAC,2BAA2B,EAAEW,MAAM,CAAC;EAC9C,IAAIA,MAAM,KAAKK,SAAS,EAAE;IACtB,IAAI,CAACf,WAAW,CAACC,IAAI,CAAC,KAAK,CAAC;IAC5B,IAAI,CAACI,OAAO,CAACJ,IAAI,CAAC,EAAE,CAAC;GACxB,MAAM;IACH,IAAI,CAACD,WAAW,CAACC,IAAI,CAAC,IAAI,CAAC;IAC3B,IAAI,CAACI,OAAO,CAACJ,IAAI,CAACS,MAAM,CAAC;;AAEjC,CAAC;;mBAzDQf,WAAW;AAAA;;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;EAAAwB,YADE;AAAM","names":["deleteAuthorization","getAuthorization","getRoles","first","tap","Subject","log","ROLLE_ADMIN","AuthService","constructor","jwtService","isLoggedIn","debug","isLoggedIn$","next","rollen","roles","length","rollen$","login","username","password","pipe","result","__classPrivateFieldGet","subscribe","logout","authorization","undefined","isAdmin","includes","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Dominik\\software-engineering\\kundeweb\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["/*\n * Copyright (C) 2016 - present Juergen Zimmermann, Hochschule Karlsruhe\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {\n    deleteAuthorization,\n    getAuthorization,\n    getRoles,\n} from './storage.service';\nimport { first, tap } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { JwtService } from './jwt.service'; // eslint-disable-line @typescript-eslint/consistent-type-imports\nimport { Subject } from 'rxjs';\nimport log from 'loglevel';\n\nexport const ROLLE_ADMIN = 'admin';\n// Spring Security:\n// export const ROLLE_ADMIN = 'ROLE_ADMIN'\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n    // in RxJS: Observables = Event-Streaming mit Promises\n    // Subject statt Basisklasse Observable: in login() und logout() wird next() aufgerufen\n    // Suffix \"$\" wird als \"Finnish Notation\" bezeichnet https://medium.com/@benlesh/observables-and-finnish-notation-df8356ed1c9b\n    readonly isLoggedIn$ = new Subject<boolean>();\n\n    // public fuer z.B. nav.component mit der Property isAdmin\n    readonly rollen$ = new Subject<string[]>();\n\n    constructor(private readonly jwtService: JwtService) {\n        // OnInit ist nur bei @Component moeglich\n        if (this.isLoggedIn) {\n            log.debug('AuthService.constructor: bereits eingeloggt');\n            this.isLoggedIn$.next(true);\n\n            const rollen = this.roles;\n            if (rollen.length > 0) {\n                log.debug('AuthService.constructor: rollen=', rollen);\n                this.rollen$.next(rollen);\n            }\n\n            return;\n        }\n\n        log.debug('AuthService.constructor: noch nicht eingeloggt');\n        this.isLoggedIn$.next(false);\n    }\n\n    /**\n     * @param username als String\n     * @param password als String\n     * @return void\n     */\n    login(username: string | undefined, password: string | undefined) {\n        log.debug(\n            `AuthService.login: username=${username}, password=${password}`,\n        );\n\n        this.jwtService\n            .login(username, password)\n            .pipe(\n                // den 1. Datensatz empfangen und danach implizites \"unsubscribe\"\n                first(),\n                tap(result => this.#handleLogin(result)),\n            )\n            .subscribe();\n    }\n\n    #handleLogin(result: string[] | undefined) {\n        log.debug('AuthService.login: result', result);\n        if (result === undefined) {\n            this.isLoggedIn$.next(false);\n            this.rollen$.next([]);\n        } else {\n            this.isLoggedIn$.next(true);\n            this.rollen$.next(result);\n        }\n    }\n\n    /**\n     * @return void\n     */\n    logout() {\n        log.debug('AuthService.logout()');\n        deleteAuthorization();\n        this.isLoggedIn$.next(false);\n        this.rollen$.next([]);\n    }\n\n    /**\n     * @return String fuer JWT oder Basic-Authentifizierung\n     */\n    get authorization() {\n        return getAuthorization();\n    }\n\n    /**\n     * Statische Abfrage, z.B. beim Start des Browsers, wenn noch kein\n     * Click-Ereignis eingetreten ist.\n     * @return true, falls ein User eingeloggt ist; sonst false.\n     */\n    get isLoggedIn() {\n        return getAuthorization() !== undefined;\n    }\n\n    /**\n     * Statische Abfrage, z.B. beim Start des Browsers, wenn noch kein\n     * Click-Ereignis eingetreten ist oder bei der Anzeige des Suchergebnisses.\n     * @return true, falls ein User in der Rolle \"admin\" eingeloggt ist;\n     *         sonst false.\n     */\n    get isAdmin() {\n        return getRoles().includes(ROLLE_ADMIN);\n    }\n\n    /**\n     * Statische Abfrage, z.B. beim Start des Browsers, wenn noch kein\n     * Click-Ereignis eingetreten ist oder bei der Anzeige des Suchergebnisses.\n     * @return Array der vorhandenen Rollen.\n     */\n    get roles() {\n        return getRoles();\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}